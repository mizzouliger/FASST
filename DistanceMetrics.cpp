//
// Created by Seth Wiesman on 2/23/16.
//

#include <math.h>
#include "DistanceMetrics.hpp"

const signed char BLOSUM62[][25] = { // the blosum 62 scoring matrix
        {4, 0, 0, -2, -1, -2, 0, -2, -1, 0, -1, -1, // A
                                             -1, -2, 0, -1, -1, -1, 1, 0, 0, 0, -3, 0, -2},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 9, -3, -4, -2, -3, -3, -1, 0, -3, -1, // C
                                             -1, -3, 0, -3, -3, -3, -1, -1, 0, -1, -2, 0, -2},
        {-2, 0, -3, 6, 2, -3, -1, -1, -3, 0, -1, -4, // D
                                             -3, 1, 0, -1, 0, -2, 0, -1, 0, -3, -4, 0, -3},
        {-1, 0, -4, 2, 5, -3, -2, 0, -3, 0, 1, -3, // E
                                             -2, 0, 0, -1, 2, 0, 0, -1, 0, -2, -3, 0, -2},
        {-2, 0, -2, -3, -3, 6, -3, -1, 0, 0, -3, 0, // F
                                             0, -3, 0, -4, -3, -3, -2, -2, 0, -1, 1, 0, 3},
        {0, 0, -3, -1, -2, -3, 6, -2, -4, 0, -2, -4, // G
                                             -3, 0, 0, -2, -2, -2, 0, -2, 0, -3, -2, 0, -3},
        {-2, 0, -3, -1, 0, -1, -2, 8, -3, 0, -1, -3, // H
                                             -2, 1, 0, -2, 0, 0, -1, -2, 0, -3, -2, 0, 2},
        {-1, 0, -1, -3, -3, 0, -4, -3, 4, 0, -3, 2, // I
                                             1, -3, 0, -3, -3, -3, -2, -1, 0, 3, -3, 0, -1},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {-1, 0, -3, -1, 1, -3, -2, -1, -3, 0, 5, -2, // K
                                             -1, 0, 0, -1, 1, 2, 0, -1, 0, -2, -3, 0, -2},
        {-1, 0, -1, -4, -3, 0, -4, -3, 2, 0, -2, 4, // L
                                             2, -3, 0, -3, -2, -2, -2, -1, 0, 1, -2, 0, -1},
        {-1, 0, -1, -3, -2, 0, -3, -2, 1, 0, -1, 2, // M
                                             5, -2, 0, -2, 0, -1, -1, -1, 0, 1, -1, 0, -1},
        {-2, 0, -3, 1, 0, -3, 0, 1, -3, 0, 0, -3, // N
                                             -2, 6, 0, -2, 0, 0, 1, 0, 0, -3, -4, 0, -2},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {-1, 0, -3, -1, -1, -4, -2, -2, -3, 0, -1, -3, // P
                                             -2, -2, 0, 7, -1, -2, -1, -1, 0, -2, -4, 0, -3},
        {-1, 0, -3, 0, 2, -3, -2, 0, -3, 0, 1, -2, // Q
                                             0, 0, 0, -1, 5, 1, 0, -1, 0, -2, -2, 0, -1},
        {-1, 0, -3, -2, 0, -3, -2, 0, -3, 0, 2, -2, // R
                                             -1, 0, 0, -2, 1, 5, -1, -1, 0, -3, -3, 0, -2},
        {1, 0, -1, 0, 0, -2, 0, -1, -2, 0, 0, -2, // S
                                             -1, 1, 0, -1, 0, -1, 4, 1, 0, -2, -3, 0, -2},
        {0, 0, -1, -1, -1, -2, -2, -2, -1, 0, -1, -1, // T
                                             -1, 0, 0, -1, -1, -1, 1, 5, 0, 0, -2, 0, -2},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, -1, -3, -2, -1, -3, -3, 3, 0, -2, 1, // V
                                             1, -3, 0, -2, -2, -3, -2, 0, 0, 4, -3, 0, -1},
        {-3, 0, -2, -4, -3, 1, -2, -2, -3, 0, -3, -2, // W
                                             -1, -4, 0, -4, -2, -3, -3, -2, 0, -3, 11, 0, 2},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {-2, 0, -2, -3, -2, 3, -3, 2, -1, 0, -2, -1, // Y
                                             -1, -2, 0, -3, -1, -2, -2, -2, 0, -1, 2, 0, 7}
};

double ::Thesis::Metrics::norm2(const std::vector<double> &v1, const std::vector<double> &v2) {
    double sum = 0.0;
    for (auto i = 0; i < v1.size(); i++) {
        sum += ((v1[i] - v2[i]) * (v1[i] - v2[i]));
    }

    return sqrt(sum);
}

double ::Thesis::Metrics::editDistance(const std::string &s1, const std::string &s2) {
    auto length1 = s1.length();
    auto length2 = s2.length();

    std::vector<std::vector<int>> table(length1 + 1, std::vector<int>(length2 + 1));

    for (auto i = 0; i <= length1; i++) {
        table[i][0] = i;
    }

    for (auto i = 1; i <= length2; i++) {
        table[0][i] = i;
    }

    for (auto i = 1; i <= length1; i++) {
        for (auto j = 1; j <= length2; j++) {
            auto min = std::min(table[i - 1][j], table[i][j-1]) + 1;
            table[i][j] = std::min(min, table[i - 1][j - 1] + (s1[i - 1] == s2[j-1] ? 0 : 1));
        }
    }

    return static_cast<double>(table[length1][length2]);
}

double ::Thesis::Metrics::hammingDistance(const int &x, const int &y) {
    short dist = 0;
    int val = x^y;

    while(val) {
        ++dist;
        val &= val - 1;
    }

    return static_cast<double>(dist);
}

std::vector<std::vector<double>> vector2d(unsigned long n, unsigned long m) {
    std::vector<std::vector<double>> v;
    v.reserve(n);
    for (auto i = 0; i < n; i++) {
        v[i].reserve(m);
    }

    return v;
}

double ::Thesis::Metrics::blosum(const std::string& s1, const std::string& s2) {
    return 0;
}
